# -*- coding: utf-8 -*-
"""DataProcess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nyN_DQ0BxVYvu2yGtJuB7huWEEfB-LJY
"""

import pandas as pd
import os
import torch.nn as nn
import numpy as np
import glob
#import matplotlib.pyplot as plt
import numpy
import torch
from torchvision import models
from torchvision import datasets,transforms
from PIL import Image
import torch.nn as nn
from torch.utils.data.sampler import SubsetRandomSampler
from torch.utils.data import Dataset
import torchvision
import torchvision.transforms as transforms
from sklearn.preprocessing import LabelEncoder

#from google.colab import drive
#drive.mount('/content/drive')



images=[]
labels=[]
folder='cropped_images'
for subfolder in os.listdir(folder):
  if subfolder=='robert_downey_jr':
    for f in os.listdir(os.path.join(folder,subfolder)):
      images.append(f)
      labels.append('robert_downey_jr')

  if subfolder=='mark_ruffalo':
    for f in os.listdir(os.path.join(folder,subfolder)):

      images.append(f)
      labels.append('mark_ruffalo')

  if subfolder== 'chris_hemsworth':
    for f in os.listdir(os.path.join(folder,subfolder)):
      images.append(f)
      labels.append('chris_hemsworth')

  if subfolder=='scarlett_johansson':
    for f in os.listdir(os.path.join(folder,subfolder)):
      images.append(f)
      labels.append('scarlett_johansson')

  if subfolder== 'chris_evans':
    for f in os.listdir(os.path.join(folder,subfolder)):
      images.append(f)
      labels.append( 'chris_evans')

  

data = {'Images':images, 'labels':labels} 
data = pd.DataFrame(data) 
data['encoded_labels'] = LabelEncoder().fit_transform(data['labels'])

dataset_size = len(data)
test= int(0.2 * dataset_size)
train = int(0.8 * dataset_size)

shuffle_dataset = True
random_seed= 42

indices = list(range(dataset_size))



if shuffle_dataset :
    np.random.seed(random_seed)
    np.random.shuffle(indices)
    
test_indices , train_indices  = indices[:test], indices[test+1:]


train_sampler = SubsetRandomSampler(train_indices)
test_sampler = SubsetRandomSampler(test_indices)




transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])




class image_Dataset(Dataset):

  def __init__(self, img_data,img_path,transform=None):
  
    self.img_path = img_path
    self.transform = transform
    self.img_data = img_data
    
  def __len__(self):

    return len(self.img_data)

  def __getitem__(self, index):

    img_name = os.path.join(self.img_path,self.img_data.loc[index, 'labels'],
                            self.img_data.loc[index, 'Images'])
  
    image = Image.open(img_name)
    image = image.resize((300,300))
    label = torch.tensor(self.img_data.loc[index, 'encoded_labels'])
    if self.transform is not None:
        image = self.transform(image)
    return image, label


dataset = image_Dataset(data,folder,transform)

train_loader = torch.utils.data.DataLoader(dataset, batch_size=4, 
                                           sampler=train_sampler)
test_loader = torch.utils.data.DataLoader(dataset, batch_size=4,
                                                sampler=test_sampler)

dataloaders = {
    'train': train_loader,
    'test': test_loader
    }

dataset_sizes = {
    'train': train,
    'test': test
}

path='cropped_images'

class_names=os.listdir(path)

'''
def img_display(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    npimg = np.transpose(npimg, (1, 2, 0))
    return npimg


#training data plot
dataiter = iter(train_loader)
images, labels = dataiter.next()
types = {0: 'chris_evans',1: 'chris_hemsworth' ,2: 'mark_ruffalo', 3: 'robert_downey_jr',4: 'scarlett_johansson'}
fig, axis = plt.subplots(2, 2, figsize=(5, 5))
for i, ax in enumerate(axis.flat):
    with torch.no_grad():
        image, label = images[i], labels[i]
        ax.imshow(img_display(image))
        ax.set(title = f"{types[label.item()]}")
'''
        
        







